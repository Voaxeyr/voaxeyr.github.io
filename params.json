{
  "name": "Xenhat's Github website",
  "tagline": "MeowMeowMeow. Pardon the mess.",
  "body": "---\r\nlayout: post\r\ntitle: \"Compiling Second Life Viewers under Linux\"\r\ndescription: \"Attempting to make something complicated a bit more KISS\"\r\ncategory: Linux\r\ntags: []\r\n---\r\n{% include JB/setup %}\r\n\r\n#####This page will gradually be converted to markdown format as I get to it...\r\n\r\nLast Updated: **Sun Nov 14 2014** — _Fixed 32-bit Ubuntu libs and more markdown formatting_\r\n\r\nI’m trying to make the most straightforward guide to compile Second life viewers on various GNU/Linux distributions. Package list for **Arch Linux**, **Debian**, **Fedora 16**/**17**, **Gentoo** and **OpenSUSE 11** are available.\r\n\r\nAll we are going to use is a **terminal** and a **text editor**, very few mouse actions.\r\n\r\n### Setting up the build environment\r\n\r\nThe required libraries and tools are the following:\r\n\r\n####Debian/Ubuntu 32-bit\r\n{% highlight bash %}\r\nsudo apt-get install \\\r\nmercurial cmake build-essential bison \\\r\n flex {libc6,libx11,libxrender}-dev \\\r\n {libxml2,libgl1-mesa,zlib1g,libssl}-dev \\\r\n {libogg,libpng12,libdbus-glib-1}-dev \\\r\n {libgtk2.0,libglu1-mesa}-dev \\\r\n libgl1-mesa-dev libboost-dev \\\r\n libqt4-dev-bin qt4-qmake \\\r\n libqt4-dev libc-ares-dev \\\r\n libhunspell-dev autoconf \\\r\n libtool libqt4-core \\\r\n libxmlrpc-c++8-dev \\\r\n libcloog-isl4 python-boto python-pip -y\r\n\r\nsudo pip install autobuild\r\n{% endhighlight %}\r\n\r\n#####Debian/Ubuntu 64-bit\r\nSee debian/Ubuntu 32bit, then;\r\n{% highlight bash %}\r\nsudo apt-get install gcc-4.7-multilib libx11-dev:i386 libxrender-dev:i386\\\r\n libxext-dev:i386 libgl1-mesa-dev:i386 \\\r\n libglu1-mesa-dev:i386 libgl1-mesa-dev:i386 mesa-common-dev:i386\r\nsudo ln -s /usr/lib/i386-linux-gnu/libX11.so.6 /usr/lib/i386-linux-gnu/libX11.so\r\nsudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so\r\nsudo ln -s /usr/lib/i386-linux-gnu/libstdc++.so.6.0.17 /usr/lib/i386-linux-gnu/libstdc++.so\r\nsudo ln -s /usr/lib/i386-linux-gnu/libXext.so.6 /usr/lib/i386-linux-gnu/libXext.so\r\nsudo ln -s /usr/lib/i386-linux-gnu/libXrender.so.1 /usr/lib/i386-linux-gnu/libXrender.so\r\n{% endhighlight %}\r\n\r\n####Fedora 16-17\r\n{% highlight bash %}\r\nsudo yum install nano bison flex glibc-devel libstdc++-devel  \\\\\r\nlibX11-devel mesa-libGL-devel libXrender-devel gcc-c++ mesa-libGLU-devel  \\\\\r\nzlib-devel openssl-devel libogg-devel libpng-devel dbus-glib-devel  \\\\\r\natk-devel cairo-devel gtk2-devel glib2-devel pango-devel python-pip  \\\\\r\npython-boto SDL-devel libXext-devel mercurial cmake make libxml2-devel\r\nsudo pip-python install autobuild\r\n{% endhighlight %}\r\n\r\n#####Fedora 64bit\r\n{% highlight bash %}\r\nInstall the packages for Fedora 16/17 (see above) then run:\r\nsudo yum remove libogg-devel glib2-devel &&\r\nsudo yum install bison flex cairo-devel.i686 dbus-glib-devel.i686  \\\\\r\nglib2-devel.i686 glibc-devel.i686 atk-devel.i686  \\\\\r\ngtk2-devel.i686 libogg-devel.i686 libpng-devel.i686  \\\\\r\nlibstdc++-devel.i686 libX11-devel.i686 libXext-devel.i686  \\\\\r\nlibXrender-devel.i686 mesa-libGL-devel.i686 mesa-libGLU-devel.i686  \\\\\r\nopenssl-devel.i686 pango-devel.i686 SDL-devel.i686 zlib-devel.i686  \\\\\r\nlibxml2-devel.i686\r\n{% endhighlight %}\r\n\r\n####OpenSUSE\r\n{% highlight bash %}\r\nsudo zypper in mercurial cmake gcc-4.5 gcc45-c++ gcc-c++ bison flex  \\\\\r\nglibc-devel libstdc++-devel xorg-x11-libX11-devel mesa-devel  \\\\\r\nxorg-x11-libXrender-devel zlib-devel libopenssl-devel libpng12-devel  \\\\\r\nlibxml2-devel python-pip\r\n&& sudo pip install autobuild\r\n{% endhighlight %}\r\n\r\n####Gentoo\r\n{% highlight bash %}\r\nemerge -av mercurial cmake bison flex sys-libs/lib-compat  \\\\\r\nmedia-libs/gstreamer dev-python/pip --autounmask-write\r\n\r\nsudo pip install autobuild\r\nYou really want to compile SDL with USE=”X opengl” at least.\r\n{% endhighlight %}\r\n\r\n####Arch Linux\r\n{% highlight bash %}\r\nsudo pacman -S gcc cmake base-devel bison flex glibc libx11 libxrender  \\\\\r\nlibxml2 mesa zlib openssl libogg libpng inetutils bc gtk2 glib2\r\nyaourt -S python2\r\nyaourt -S python2-boto\r\nyaourt -S autobuild\r\nSince Arch Linux uses python 3 as default, we have to force python 2…\r\n\r\nsudo unlink /usr/bin/python\r\nsudo ln -s /usr/bin/python2.7 /usr/bin/python\r\nI know, it’s dirty, but it’s the only way it works.\r\n{% endhighlight %}\r\n\r\n#####Arch Linux 64bit\r\n{% highlight bash %}\r\ndo the Arch Linux instructions above, then install these:\r\nsudo pacman -S multilib-devel bison flex glibc\r\nsudo pacman -S multilib/lib32-acl multilib/lib32-alsa-lib multilib/lib32-alsa-oss \\\r\nmultilib/lib32-alsa-plugins multilib/lib32-atk multilib/lib32-attr \\\r\nmultilib/lib32-bzip2 multilib/lib32-cairo multilib/lib32-celt \\\r\nmultilib/lib32-dbus-core multilib/lib32-e2fsprogs multilib/lib32-expat \\\r\nmultilib/lib32-flac multilib/lib32-fontconfig multilib/lib32-freetype2 \\\r\nmultilib/lib32-gcc-libs multilib/lib32-gdk-pixbuf2 multilib/lib32-gettext \\\r\nmultilib/lib32-giflib multilib/lib32-glew multilib/lib32-glib \\\r\nmultilib/lib32-glib2 multilib/lib32-glibc multilib/lib32-gmp \\\r\nmultilib/lib32-gnutls multilib/lib32-gtk multilib/lib32-gtk2 \\\r\nmultilib/lib32-json-c multilib/lib32-keyutils multilib/lib32-krb5 \\\r\nmultilib/lib32-lcms multilib/lib32-libao multilib/lib32-libasyncns \\\r\nmultilib/lib32-libcanberra multilib/lib32-libcanberra-pulse \\\r\nmultilib/lib32-libcap multilib/lib32-libcups multilib/lib32-libffi \\\r\nmultilib/lib32-libgbm multilib/lib32-libgcrypt multilib/lib32-libgpg-error \\\r\nmultilib/lib32-libice multilib/lib32-libidn multilib/lib32-libjpeg-turbo \\\r\nmultilib/lib32-libldap multilib/lib32-libltdl multilib/lib32-libmikmod \\\r\nmultilib/lib32-libmng multilib/lib32-libogg multilib/lib32-libpciaccess \\\r\nmultilib/lib32-libphobos multilib/lib32-libpng multilib/lib32-libpulse \\\r\nmultilib/lib32-libsamplerate multilib/lib32-libsm multilib/lib32-libsndfile \\\r\nmultilib/lib32-libssh2 multilib/lib32-libstdc++5 multilib/lib32-libtiff \\\r\nmultilib/lib32-libvorbis multilib/lib32-libx11 multilib/lib32-libxau \\\r\nmultilib/lib32-libxcb multilib/lib32-libxcomposite \\\r\nmultilib/lib32-libxcursor multilib/lib32-libxdamage \\\r\nmultilib/lib32-libxdmcp multilib/lib32-libxext multilib/lib32-libxfixes \\\r\nmultilib/lib32-libxft multilib/lib32-libxi multilib/lib32-libxinerama \\\r\nmultilib/lib32-libxml2 multilib/lib32-libxmu multilib/lib32-libxrandr \\\r\nmultilib/lib32-libxrender multilib/lib32-libxss multilib/lib32-libxt \\\r\nmultilib/lib32-libxtst multilib/lib32-libxv multilib/lib32-libxvmc \\\r\nmultilib/lib32-libxxf86vm multilib/lib32-mesa multilib/lib32-mesa-demos \\\r\nmultilib/lib32-mpg123 multilib/lib32-ncurses multilib/lib32-nettle \\\r\nmultilib/lib32-nvidia-utils multilib/lib32-openal multilib/lib32-openssl \\\r\nmultilib/lib32-osmesa multilib/lib32-p11-kit multilib/lib32-pango \\\r\nmultilib/lib32-pcre multilib/lib32-pixman multilib/lib32-qt4 \\\r\nmultilib/lib32-readline multilib/lib32-sdl multilib/lib32-sdl_image \\\r\nmultilib/lib32-sdl_ttf multilib/lib32-speex multilib/lib32-sqlite3 \\\r\nmultilib/lib32-tdb multilib/lib32-util-linux multilib/lib32-v4l-utils \\\r\nmultilib/lib32-xcb-util multilib/lib32-zlib\r\nIf you have a Nvidia graphic card, you’re going to need this:\r\n\r\nsudo pacman -S lib32-nvidia-libgl\r\n{% endhighlight %}\r\n\r\n### Getting the code\r\nFirst, let’s keep the home folder nicely organized and create a folder where all the source code will go (because when it’s all over the place it looks ugly and takes time to find stuff)\r\nI will use Linden Lab’s Release channel viewer in this example, adapt if you want to compile a different viewer\r\n\r\n{% highlight bash %}\r\nmkdir -p /home/$USER/src/viewers/\r\ncd /home/$USER/src/viewers/\r\nhg clone https://bitbucket.org/lindenlab/viewer-release ll_release\r\n{% endhighlight %}\r\nThese commands will create a folder called “src” (for SouRCe) and a sub-directory called “viewers” and download the viewer’s source code in it’s own sub folder.\r\nGet a cup of coffee, it’ll take a while.\r\nWelcome back.\r\nNow, we’ll try compiling.\r\nThe autobuild system is pretty much straightforward:\r\n\r\n{% highlight bash %}\r\ncd /home/$USER/src/viewers/ll_release/\r\nautobuild configure -c ReleaseOS -- -DLL_TESTS:BOOL=FALSE\r\nautobuild build --no-configure\r\n{% endhighlight %}\r\n\r\nThis will take a while. You probably should get a sammish. Or two. Or a full plate of them.\r\nIt took 1:30:00 to compile on an AMD Athlon64 II X2 3800+, 00:15:00 on an AMD Phenom II X6 1055T. Numbers still TBD for AMD FX-8350.\r\n\r\nWelcome back.\r\nNow, check if everything went right. Good project managers will ensure that the code in the repository compiles for everyone.If that's not the case, that’s unfortunate.\r\n\r\nOnce you made sure the viewer compiled sucessfully, extract the generated archive somewhere, example in your user directory:\r\n\r\n{% highlight bash %}\r\ntar xvaf build-linux-i686/newview/SecondLife*.tar.* -C /home/$USER/\r\n{% endhighlight %}\r\n\r\nNow run the viewer as usual;\r\n{% highlight bash %}\r\ncd /home/$USER/SecondLife*/\r\n./secondlife\r\n{% endhighlight %}\r\n\r\nif it doesn’t crash, congratulations!\r\n\r\nIf it does crash, you probably:\r\n* Did something wrong (Like forget a library, especially on blank window)\r\n* A programmer needs to be slapped\r\n* That viewer doesn't support linux (yet?)\r\n* The world just ended.\r\n* \r\n————\r\n\r\nMany thanks Sythos (Altair.Memo) for the amazing help to find the required libs\r\n    and indications to fix the code myself back on Kirstens Viewer (2010-2011),\r\n    as well as his patience.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}